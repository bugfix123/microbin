# 工作流名称
name: Build and Push Docker Image to GHCR

on:
  push:
    # 当推送到 main 分支时触发
    branches:
      - 'dev'
    # 当推送 vX.X.X 格式的 tag 时触发
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+*'
permissions:
  contents: read
  packages: write
  
jobs:
  build-and-push-image:
    name: Build and Push Docker Image
    # 始终在最新的 ubuntu 环境中运行
    runs-on: ubuntu-latest
    # 设置权限，允许向 GHCR 写入


    steps:
      # 1. 检出代码
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. 为 Docker 镜像生成元数据（标签等）
      #    - 这会根据你的分支和 tag 自动生成镜像标签，例如：
      #      - 推送到 main 分支 -> ghcr.io/your-username/your-repo:latest
      #      - 推送 tag v1.2.3 -> ghcr.io/your-username/your-repo:v1.2.3, ghcr.io/your-username/your-repo:1.2, ...
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }} # 镜像仓库地址
          tags: |
            type=schedule
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha

      # 3. 设置 QEMU，用于多平台构建
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      # 4. 设置 Docker Buildx，这是一个现代化的 Docker 构建工具
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 5. 登录到 GitHub Container Registry (GHCR)
      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.CR_PAT }}
          

      # 6. 【核心步骤】构建并推送 Docker 镜像
      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: . # Dockerfile 的上下文路径，. 表示当前目录
          push: ${{ github.event_name != 'pull_request' }} # 只有在非 PR 事件中才推送镜像
          tags: ${{ steps.meta.outputs.tags }} # 使用上面生成的标签
          labels: ${{ steps.meta.outputs.labels }} # 使用上面生成的元数据
          platforms: linux/amd64 # 只为你想要的 linux/amd64 平台构建
          cache-from: type=gha # 开启缓存，从 GitHub Actions Cache 读取
          cache-to: type=gha,mode=max # 开启缓存，写入到 GitHub Actions Cache
